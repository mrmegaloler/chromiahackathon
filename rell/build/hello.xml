<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<dict>
    <entry key="blockstrategy">
        <dict>
            <entry key="name">
                <string>net.postchain.base.BaseBlockBuildingStrategy</string>
            </entry>
        </dict>
    </entry>
    <entry key="config_consensus_strategy">
        <string>HEADER_HASH</string>
    </entry>
    <entry key="configurationfactory">
        <string>net.postchain.gtx.GTXBlockchainConfigurationFactory</string>
    </entry>
    <entry key="gtx">
        <dict>
            <entry key="modules">
                <array>
                    <string>net.postchain.rell.module.RellPostchainModuleFactory</string>
                    <string>net.postchain.gtx.StandardOpsGTXModule</string>
                </array>
            </entry>
            <entry key="rell">
                <dict>
                    <entry key="moduleArgs">
                        <dict>
                            <entry key="main">
                                <dict>
                                    <entry key="admin_key">
                                        <string>12312312312312</string>
                                    </entry>
                                </dict>
                            </entry>
                        </dict>
                    </entry>
                    <entry key="modules">
                        <array>
                            <string>main</string>
                        </array>
                    </entry>
                    <entry key="sources">
                        <dict>
                            <entry key="auth.rell">
                                <string>module;

val SESSION_LENGTH = 1200000; // 20 minutes
val TIME_OFFSET = 300000; // 5 minutes

struct session_token {
  message: session_message;
  signed_message: signature;
}

struct session_message {
  prompt: text;
  disposable_pubkey: text;
  timestamp;
}

struct signature {
  r: text;
  s: text;
  v: integer;
}

function estimate_current_time(): timestamp {
  return op_context.last_block_time;
}

function session_msg_to_json(session_msg: session_message): text {
  return '{"prompt":"%s","disposable_pubkey":"%s","timestamp":%s}'.format(
    session_msg.prompt,
    session_msg.disposable_pubkey,
    session_msg.timestamp
  );
}

function recover_address(message: text, sig: signature): pubkey {
  val message_hash = keccak256(("\u0019Ethereum Signed Message:\n" + message.size().to_text() + message).to_bytes());
  val ecrec_result = eth_ecrecover(
    byte_array(sig.r.sub(2)),
    byte_array(sig.s.sub(2)),
    sig.v - 27,
    message_hash
  );
  val recovered_address = keccak256(ecrec_result).sub(12);
  return recovered_address;
}

function is_session_alive(token: session_token): boolean {
  val current_time = estimate_current_time();
  val signed_time = token.message.timestamp;
  if (signed_time &gt; current_time + TIME_OFFSET) return false;
  if (signed_time &lt; current_time - SESSION_LENGTH) return false;
  return true;
}

function validate_session(token: session_token): pubkey? {
  require(op_context.is_signer(byte_array(token.message.disposable_pubkey)));
  val message_text = session_msg_to_json(token.message);
  val recovered_address = recover_address(message=message_text, sig=token.signed_message);
  if (not is_session_alive(token)) return null;
  return recovered_address;
}</string>
                            </entry>
                            <entry key="main.rell">
                                <string>module;
import auth.*;

enum TICKET_STATUS {
  CREATED,
  TRANSFERRED,
  REDEEMED
}

struct module_args {
  admin_key: pubkey;
}

entity user {
    key pubkey: pubkey;
    name: text;
    email: text;
}

entity ticket {
   mutable user; // linking the Ticket to the User
   mutable status: TICKET_STATUS = TICKET_STATUS.CREATED; 
   event; // linking the Ticket to the Event
   description: text; 
}

entity event {
    name: text;
    description: text;
    date: timestamp;
    location: text;
}

operation create_event (token: session_token, event_name: text, event_description: text, event_location: text, event_timestamp: timestamp, amount: integer) {
  val pubkey = validate_session(token);
  require(pubkey);
  require(pubkey == chain_context.args.admin_key);
  val admin_user = user@{pubkey};
  val event = create event (name = event_name, description = event_description, location = event_location,  date = event_timestamp);
  for(x in range(amount)){
    create ticket (admin_user, event, "concert");
  }
}

query get_ticket_owner(id: rowid): text {
return ticket @ { .rowid == id } (.user.name);
}

query get_my_tickets(pubkey): list&lt;rowid&gt; {
  return ticket @* { .user.pubkey == pubkey } (.rowid);
}

query get_events(): list&lt;event&gt; {
  return event @* {};
}

query get_available_tickets_for_event(event): integer {
  return ticket @ { .event == event } (@sum 1);
}

// Hello world query
query hello_world() = "Hello  %s!".format("Netlight");
query get_user(pubkey) {
  return user @? {pubkey};
}

operation register (token: session_token, username: text) {
  val pubkey = validate_session(token);
  require(pubkey);
  create user (pubkey, name=username, email=username );
}

operation transfer_ticket(receiver: pubkey, ticket: ticket){
  require(op_context.is_signer(ticket.user.pubkey));
  update ticket (user = user@{receiver});
}

operation create_user(token: session_token, name: text, email: text){
  val pubkey = validate_session(token);
  require(pubkey);
  create user (pubkey, name, email);
}

  //TODO
  //Query for getting tickets for event
  //Operation for changing status of event

  //We need to use the backend for handling the initial transaction of the ticket from the admin user to
  //The first real user. Everything else can be handled by the client library in the frontend.

</string>
                            </entry>
                        </dict>
                    </entry>
                    <entry key="version">
                        <string>0.12.0</string>
                    </entry>
                </dict>
            </entry>
        </dict>
    </entry>
    <entry key="revolt">
        <dict>
            <entry key="fast_revolt_status_timeout">
                <int>1000</int>
            </entry>
        </dict>
    </entry>
</dict>
